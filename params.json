{
  "name": "Net::HTTP::Spore",
  "tagline": "Perl implementation for SPORE",
  "body": "# NAME\r\n\r\nNet::HTTP::Spore - SPORE client\r\n\r\n[![Build Status](https://travis-ci.org/franckcuny/net-http-spore.svg?branch=master)](https://travis-ci.org/franckcuny/net-http-spore)\r\n\r\n# VERSION\r\n\r\nversion 0.07\r\n\r\n# SYNOPSIS\r\n\r\n    my $client = Net::HTTP::Spore->new_from_spec('twitter.json');\r\n\r\n    # from JSON specification string\r\n    my $client = Net::HTTP::Spore->new_from_string($json);\r\n\r\n    # for identica\r\n    my $client = Net::HTTP::Spore->new_from_spec('twitter.json', base_url => 'http://identi.ca/com/api');\r\n\r\n    $client->enable('Format::JSON');\r\n\r\n    my $timeline = $client->public_timeline(format => 'json');\r\n    my $tweets = $timeline->body;\r\n\r\n    foreach my $tweet (@$tweets) {\r\n        print $tweet->{user}->{screen_name}. \" says \".$tweet->{text}.\"\\n\";\r\n    }\r\n\r\n    my $friends_timeline = $client->friends_timeline(format => 'json');\r\n\r\n# DESCRIPTION\r\n\r\nThis module is an implementation of the SPORE specification.\r\n\r\nTo use this client, you need to use or to write a SPORE specification of an\r\nAPI.  A description of the SPORE specification format is available at\r\n[http://github.com/SPORE/specifications/blob/master/spore\\_description.pod](http://github.com/SPORE/specifications/blob/master/spore_description.pod)\r\n\r\nSome specifications for well-known services are available\r\n[http://github.com/SPORE/api-description](http://github.com/SPORE/api-description).\r\n\r\n## CLIENT CREATION\r\n\r\nFirst you need to create a client. This can be done using two methods,\r\n**new\\_from\\_spec** and **new\\_from\\_string**. The client will read the specification\r\nfile to create the appropriate methods to interact with the API.\r\n\r\n## MIDDLEWARES\r\n\r\nIt's possible to activate some middlewares to extend the usage of the client.\r\nIf you're using an API that discuss in JSON, you can enable the middleware\r\n[Net::HTTP::Spore::Middleware::JSON](https://metacpan.org/pod/Net::HTTP::Spore::Middleware::JSON).\r\n\r\n    $client->enable('Format::JSON');\r\n\r\nor only on some path\r\n\r\n    $client->enable_if(sub{$_->[0]->path =~ m!/path/to/json/stuff!}, 'Format::JSON');\r\n\r\nFor very simple middlewares, you can simply pass in an anonymous function\r\n\r\n    $client->enable( sub { my $request = shift; ... } );\r\n\r\n## METHODS\r\n\r\n- new\\_from\\_spec($specification\\_file, %args)\r\n\r\n    Create and return a [Net::HTTP::Spore::Core](https://metacpan.org/pod/Net::HTTP::Spore::Core) object, with methods generated\r\n    from the specification file. The specification file can either be a file on\r\n    disk or a remote URL.\r\n\r\n- new\\_from\\_string($specification\\_string, %args)\r\n\r\n    Create and return a [Net::HTTP::Spore::Core](https://metacpan.org/pod/Net::HTTP::Spore::Core) object, with methods\r\n    generated from a JSON specification string.\r\n\r\n## TRACING\r\n\r\n[Net::HTTP::Spore](https://metacpan.org/pod/Net::HTTP::Spore) provides a way to trace what's going on when doing a\r\nrequest.\r\n\r\n### Enabling Trace\r\n\r\nYou can enable tracing using the environment variable **SPORE\\_TRACE**. You can\r\nalso enable tracing at construct time by adding **trace => 1** when calling\r\n**new\\_from\\_spec**.\r\n\r\n### Trace Output\r\n\r\nBy default output will be directed to **STDERR**. You can specify another\r\ndefault output:\r\n\r\n    SPORE_TRACE=1=log.txt\r\n\r\nor\r\n\r\n    ->new_from_spec('spec.json', trace => '1=log.txt');\r\n\r\n# AUTHORS\r\n\r\n- franck cuny <franck@lumberjaph.net>\r\n- Ash Berlin <ash@cpan.org>\r\n\r\n# COPYRIGHT AND LICENSE\r\n\r\nThis software is copyright (c) 2012 by linkfluence.\r\n\r\nThis is free software; you can redistribute it and/or modify it under\r\nthe same terms as the Perl 5 programming language system itself.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}